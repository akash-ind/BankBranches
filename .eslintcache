[{"/home/akash/projects/Fyle/Client/fyleproject/src/index.js":"1","/home/akash/projects/Fyle/Client/fyleproject/src/App.js":"2","/home/akash/projects/Fyle/Client/fyleproject/src/reportWebVitals.js":"3","/home/akash/projects/Fyle/Client/fyleproject/src/component/paginate.js":"4","/home/akash/projects/Fyle/Client/fyleproject/src/globalInfo.js":"5","/home/akash/projects/Fyle/Client/fyleproject/src/component/bankdetail.js":"6","/home/akash/projects/Fyle/Client/fyleproject/src/component/bank.js":"7"},{"size":500,"mtime":1611059162615,"results":"8","hashOfConfig":"9"},{"size":2803,"mtime":1611498338200,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611059162615,"results":"11","hashOfConfig":"9"},{"size":2248,"mtime":1611239827022,"results":"12","hashOfConfig":"9"},{"size":65,"mtime":1611252334802,"results":"13","hashOfConfig":"9"},{"size":2141,"mtime":1611252899176,"results":"14","hashOfConfig":"9"},{"size":5731,"mtime":1611252860427,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"rm5jma",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/akash/projects/Fyle/Client/fyleproject/src/index.js",[],["33","34"],"/home/akash/projects/Fyle/Client/fyleproject/src/App.js",[],"/home/akash/projects/Fyle/Client/fyleproject/src/reportWebVitals.js",[],"/home/akash/projects/Fyle/Client/fyleproject/src/component/paginate.js",[],["35","36"],"/home/akash/projects/Fyle/Client/fyleproject/src/globalInfo.js",[],"/home/akash/projects/Fyle/Client/fyleproject/src/component/bankdetail.js",[],"/home/akash/projects/Fyle/Client/fyleproject/src/component/bank.js",["37"],"import React, { Component } from 'react';\nimport { Container,Row, Col,  Form, Table, Button } from 'react-bootstrap';\nimport Paginate from './paginate';\nimport {MdFavorite} from 'react-icons/md';\nimport {ServerDomain} from '../globalInfo';\nimport \"../css/bank.css\";\nimport {\n  withRouter,\n  Link\n} from 'react-router-dom';\n\n\nclass Bank extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageSize: 10,\n      offset:0,\n      data: [],\n      count:0,\n      loading:false,\n      favourite:false,\n      favouriteChanged:false\n    }\n  }\n  searchCity = (pageSize)=>{\n    // Returns the result fo the city\n    if(this.state.favourite)\n    {\n      return this.favouriteBanks()\n    }\n    this.setState({\n      loading:true\n    })\n    const { hasCache, getCache } = this.props.cacheActions\n    let url = `${ServerDomain}/api/branches/city?limit=${pageSize}&offset=${this.state.offset}&q=${this.props.city}`\n    const params = {\n      pageSize:this.state.pageSize,\n      offset:this.state.offset,\n      city:this.props.city,\n    }\n    if(hasCache(url, params) && !(this.state.favouriteChanged))\n    {\n      console.log(\"Cached data\");\n      this.setData(getCache(url, params).data)\n    }\n    else{\n      fetch(\n        url\n      )\n      .then(res=>{\n        console.log(res);\n        return res.json()})\n      .then(data=>{\n        console.log(data)\n        this.setData(data);\n        this.props.cacheActions.setCache(url, params, data);\n      })\n    }\n  }\n\n  setData = data=>{\n    this.setState({\n      data:data.results,\n      loading:false,\n      count:data.count\n    })\n  }\n\n  changePageSize = e => {\n    if(e.target.value != 0)\n    {\n      this.setState({\n        pageSize: e.target.value\n      })\n      this.searchCity(e.target.value)\n    }\n  }\n\n  changePageNo = pageNo => {\n    this.setState({\n      offset: pageNo-1\n    }, ()=>this.searchCity(this.state.pageSize))\n  }\n\n  invertFavourite = e=>{\n    let el = e.target.closest(\"[data-key]\")\n    let id = el.getAttribute('data-key');\n    fetch(`${ServerDomain}/api/invert-favourite/?id=${id}`)\n    .then(res=>res.json())\n    .then(data=>console.log(data))\n    if(el.getAttribute('class')==='favourite')\n    {\n      el.setAttribute('class', \"\");\n    }\n    else{\n      el.setAttribute(\"class\", \"favourite\");\n    }\n    this.setState({favouriteChanged:true})\n  }\n\n  favouriteBanks = e=>{\n    this.setState({\n       loading:true})\n    fetch(`${ServerDomain}/api/get-favourite/?limit=${this.state.pageSize}&offset=${this.state.offset}`)\n    .then(res=>res.json())\n    .then(data=>{\n      this.setState({\n        data:data.results,\n        count: data.count,\n        favourite: true, \n        loading:false,\n      })\n    })\n  }\n\n  handleFavouriteClick= e=>{\n    this.setState({\n      offset:0\n    }, ()=>this.favouriteBanks())\n  }\n  allBanks = e=>{\n    this.setState({\n      favourite:false,\n      offset:0\n    }, ()=>this.searchCity(this.state.pageSize))\n  }\n\n  componentDidUpdate(prev)\n  {\n    if (prev.city!==this.props.city && !this.state.favourite)\n      this.searchCity(this.state.pageSize)  \n  }\n  componentDidMount() {\n    this.searchCity(this.state.pageSize);\n  }\n  \n  \n  render() {\n    let index = this.state.offset*this.state.pageSize+1;\n    const renderList = branch=>{\n      let branchName = branch.branch.toLowerCase();\n      let city = branch.city.toLowerCase();\n      let branchState = branch.state.toLowerCase();\n      let ifsc = branch.ifsc.toLowerCase();\n      let address = branch.address.toLowerCase();\n      let query = this.props.query.toLowerCase();\n      let queryCity = this.props.city.toLowerCase();\n      if (city.indexOf(queryCity)===-1 ||(branchName.indexOf(query) === -1 &&\n        city.indexOf(query) === -1 && branchState.indexOf(query) === -1\n        && ifsc.indexOf(query) === -1 && address.indexOf(query) === -1)) {\n        return null;\n      }\n      else{\n        return (\n        <tr key={branch.id}>\n          <td>{index++}</td>\n          <td><Link to={\"bank/\"+branch.id}>{branch.branch}</Link></td>\n          <td>{branch.city}</td>\n          <td>{branch.state}</td>\n          <td>{branch.ifsc}</td>\n          <td>{branch.favourite?<MdFavorite className=\"favourite scale\" data-key={branch.id} onClick={this.invertFavourite}/>:\n          <MdFavorite data-key={branch.id} className=\"scale\" onClick={this.invertFavourite}/>}</td>\n        </tr>)\n      }\n    }\n    const {favourite} = this.state\n    return (\n      <Container>\n        <Row className=\"mb-4\">\n          <Button variant= {favourite?\"primary-outline\":\"primary\"} onClick={this.allBanks}>All Banks</Button>\n          <Button variant = {favourite?\"primary\":\"primary-outline\"} onClick={this.handleFavouriteClick}>Favourite Banks</Button>\n        </Row>\n        \n        <Table responsive>\n          <thead>\n            <tr>\n              <th>Sno.</th>\n              <th>Branch</th>\n              <th>City</th>\n              <th>State</th>\n              <th>IFSC</th>\n              <th>Favourite</th>\n            </tr>\n          </thead>\n          <tbody>\n          {this.state.loading?\n            <div className=\"set-height\">Loading...</div>\n            :this.state.data.map(branch=>renderList(branch))}\n          </tbody>\n      \n        </Table>\n        <Row className=\"mb-3\">\n          <Col xs={3} md={2} lg={1}>\n          <Form.Control \n            type='number' \n            onChange={this.changePageSize} \n            value={this.state.pageSize}>\n          </Form.Control>\n          </Col>\n        </Row>\n        \n        <Paginate \n        changePage={this.changePageNo} \n        itemNo={this.state.count} \n        pageSize={this.state.pageSize} \n        currentPageNo={this.state.offset+1} />\n      </Container>\n    )\n  }\n}\n\n\nexport default withRouter(Bank);",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":71,"column":23,"nodeType":"46","messageId":"47","endLine":71,"endColumn":25},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],["48"],["49"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]